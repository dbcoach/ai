import React, { useState } from 'react';
import { Download, Eye, Code } from 'lucide-react';

const SampleDataTab: React.FC = () => {
  const [viewMode, setViewMode] = useState<'code' | 'table'>('table');

  const sampleData = {
    users: [
      { id: 1, email: 'john@example.com', username: 'johnsmith', first_name: 'John', last_name: 'Smith', created_at: '2024-01-15T10:30:00Z' },
      { id: 2, email: 'sarah@example.com', username: 'sarahj', first_name: 'Sarah', last_name: 'Johnson', created_at: '2024-01-16T14:22:00Z' },
      { id: 3, email: 'mike@example.com', username: 'mikew', first_name: 'Mike', last_name: 'Wilson', created_at: '2024-01-17T09:15:00Z' },
    ],
    posts: [
      { id: 1, title: 'Getting Started with React', slug: 'getting-started-react', status: 'published', author_id: 1, created_at: '2024-01-18T16:45:00Z' },
      { id: 2, title: 'Advanced TypeScript Tips', slug: 'advanced-typescript-tips', status: 'published', author_id: 2, created_at: '2024-01-19T11:30:00Z' },
      { id: 3, title: 'Building Modern UIs', slug: 'building-modern-uis', status: 'draft', author_id: 3, created_at: '2024-01-20T13:20:00Z' },
    ]
  };

  const insertStatements = `-- Sample Data for Blog Platform
-- Generated by DB.Coach

-- Users
INSERT INTO users (email, username, password_hash, first_name, last_name, created_at) VALUES
('john@example.com', 'johnsmith', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LeZJ5V5l8K5L8K5L8', 'John', 'Smith', '2024-01-15T10:30:00Z'),
('sarah@example.com', 'sarahj', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LeZJ5V5l8K5L8K5L8', 'Sarah', 'Johnson', '2024-01-16T14:22:00Z'),
('mike@example.com', 'mikew', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LeZJ5V5l8K5L8K5L8', 'Mike', 'Wilson', '2024-01-17T09:15:00Z');

-- Categories
INSERT INTO categories (name, slug, description) VALUES
('Technology', 'technology', 'Posts about latest tech trends'),
('Programming', 'programming', 'Coding tutorials and tips'),
('Design', 'design', 'UI/UX and design principles');

-- Posts
INSERT INTO posts (title, slug, content, excerpt, status, author_id, category_id, published_at, created_at) VALUES
('Getting Started with React', 'getting-started-react', 'React is a powerful JavaScript library...', 'Learn the basics of React development', 'published', 1, 2, '2024-01-18T16:45:00Z', '2024-01-18T16:45:00Z'),
('Advanced TypeScript Tips', 'advanced-typescript-tips', 'TypeScript provides excellent tooling...', 'Master advanced TypeScript features', 'published', 2, 2, '2024-01-19T11:30:00Z', '2024-01-19T11:30:00Z'),
('Building Modern UIs', 'building-modern-uis', 'Modern UI design requires...', 'Create beautiful user interfaces', 'draft', 3, 3, NULL, '2024-01-20T13:20:00Z');

-- Comments
INSERT INTO comments (content, author_id, post_id, status, created_at) VALUES
('Great article! Very helpful for beginners.', 2, 1, 'approved', '2024-01-19T08:30:00Z'),
('Thanks for sharing these tips.', 3, 2, 'approved', '2024-01-20T10:15:00Z'),
('Looking forward to more content like this.', 1, 1, 'approved', '2024-01-20T14:45:00Z');`;

  return (
    <div className="h-full flex flex-col bg-slate-900/50">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-slate-700/50 bg-slate-800/30">
        <div className="flex items-center space-x-4">
          <h3 className="font-medium text-white">Sample Data</h3>
          <div className="flex bg-slate-700/50 rounded-lg p-1">
            <button
              onClick={() => setViewMode('table')}
              className={`flex items-center space-x-2 px-3 py-1 rounded-md text-sm transition-all ${
                viewMode === 'table'
                  ? 'bg-purple-600 text-white'
                  : 'text-slate-400 hover:text-white'
              }`}
            >
              <Eye className="w-4 h-4" />
              <span>Table View</span>
            </button>
            <button
              onClick={() => setViewMode('code')}
              className={`flex items-center space-x-2 px-3 py-1 rounded-md text-sm transition-all ${
                viewMode === 'code'
                  ? 'bg-purple-600 text-white'
                  : 'text-slate-400 hover:text-white'
              }`}
            >
              <Code className="w-4 h-4" />
              <span>SQL View</span>
            </button>
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <button className="flex items-center space-x-2 px-3 py-2 bg-slate-700/50 hover:bg-slate-700 border border-slate-600/50 rounded-lg text-slate-300 hover:text-white transition-all duration-200">
            <Download className="w-4 h-4" />
            <span className="text-sm">Export CSV</span>
          </button>
          <button className="flex items-center space-x-2 px-3 py-2 bg-purple-600 hover:bg-purple-700 rounded-lg text-white transition-all duration-200">
            <Download className="w-4 h-4" />
            <span className="text-sm">Export JSON</span>
          </button>
        </div>
      </div>

      <div className="flex-1 overflow-auto">
        {viewMode === 'table' ? (
          <div className="p-4 space-y-6">
            {/* Users Table */}
            <div className="bg-slate-800/30 rounded-lg border border-slate-700/50 overflow-hidden">
              <div className="bg-purple-600/20 border-b border-purple-500/30 p-3">
                <h4 className="font-medium text-purple-300">Users ({sampleData.users.length} records)</h4>
              </div>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead className="bg-slate-700/30">
                    <tr>
                      <th className="text-left p-3 text-sm font-medium text-slate-300">ID</th>
                      <th className="text-left p-3 text-sm font-medium text-slate-300">Email</th>
                      <th className="text-left p-3 text-sm font-medium text-slate-300">Username</th>
                      <th className="text-left p-3 text-sm font-medium text-slate-300">Name</th>
                      <th className="text-left p-3 text-sm font-medium text-slate-300">Created</th>
                    </tr>
                  </thead>
                  <tbody>
                    {sampleData.users.map((user, index) => (
                      <tr key={user.id} className={`${index % 2 === 0 ? 'bg-slate-800/20' : 'bg-slate-700/20'} hover:bg-slate-700/40 transition-colors`}>
                        <td className="p-3 text-sm text-slate-300">{user.id}</td>
                        <td className="p-3 text-sm text-slate-300">{user.email}</td>
                        <td className="p-3 text-sm text-slate-300">{user.username}</td>
                        <td className="p-3 text-sm text-slate-300">{user.first_name} {user.last_name}</td>
                        <td className="p-3 text-sm text-slate-400">{new Date(user.created_at).toLocaleDateString()}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>

            {/* Posts Table */}
            <div className="bg-slate-800/30 rounded-lg border border-slate-700/50 overflow-hidden">
              <div className="bg-purple-600/20 border-b border-purple-500/30 p-3">
                <h4 className="font-medium text-purple-300">Posts ({sampleData.posts.length} records)</h4>
              </div>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead className="bg-slate-700/30">
                    <tr>
                      <th className="text-left p-3 text-sm font-medium text-slate-300">ID</th>
                      <th className="text-left p-3 text-sm font-medium text-slate-300">Title</th>
                      <th className="text-left p-3 text-sm font-medium text-slate-300">Status</th>
                      <th className="text-left p-3 text-sm font-medium text-slate-300">Author</th>
                      <th className="text-left p-3 text-sm font-medium text-slate-300">Created</th>
                    </tr>
                  </thead>
                  <tbody>
                    {sampleData.posts.map((post, index) => (
                      <tr key={post.id} className={`${index % 2 === 0 ? 'bg-slate-800/20' : 'bg-slate-700/20'} hover:bg-slate-700/40 transition-colors`}>
                        <td className="p-3 text-sm text-slate-300">{post.id}</td>
                        <td className="p-3 text-sm text-slate-300">{post.title}</td>
                        <td className="p-3 text-sm">
                          <span className={`px-2 py-1 rounded-full text-xs ${
                            post.status === 'published' 
                              ? 'bg-green-500/20 text-green-400 border border-green-500/30' 
                              : 'bg-yellow-500/20 text-yellow-400 border border-yellow-500/30'
                          }`}>
                            {post.status}
                          </span>
                        </td>
                        <td className="p-3 text-sm text-slate-300">User {post.author_id}</td>
                        <td className="p-3 text-sm text-slate-400">{new Date(post.created_at).toLocaleDateString()}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        ) : (
          <div className="flex">
            {/* Line numbers */}
            <div className="bg-slate-800/50 border-r border-slate-700/50 p-4 text-slate-500 text-sm font-mono select-none">
              {insertStatements.split('\n').map((_, index) => (
                <div key={index} className="leading-6">
                  {index + 1}
                </div>
              ))}
            </div>
            
            {/* Code content */}
            <div className="flex-1 p-4 font-mono text-sm leading-6 overflow-x-auto">
              <pre className="text-slate-200">
                <code dangerouslySetInnerHTML={{ 
                  __html: insertStatements
                    .replace(/--.*$/gm, '<span style="color: #6B7280; font-style: italic;">$&</span>')
                    .replace(/\b(INSERT|INTO|VALUES|SELECT|FROM|WHERE|AND|OR)\b/g, '<span style="color: #8B5CF6; font-weight: 600;">$1</span>')
                    .replace(/'([^']*)'/g, '<span style="color: #F59E0B;">\'$1\'</span>')
                }} />
              </pre>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default SampleDataTab;